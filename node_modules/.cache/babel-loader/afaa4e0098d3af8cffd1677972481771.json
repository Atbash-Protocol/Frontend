{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport i18n from \"../../i18n\";\nconst initialState = [];\nconst pendingTxnsSlice = createSlice({\n  name: \"pendingTransactions\",\n  initialState,\n  reducers: {\n    fetchPendingTxns(state, action) {\n      state.push(action.payload);\n    },\n\n    clearPendingTxn(state, action) {\n      const target = state.find(x => x.txnHash === action.payload);\n\n      if (target) {\n        state.splice(state.indexOf(target), 1);\n      }\n    }\n\n  }\n});\nexport const getStakingTypeText = action => {\n  return action.toLowerCase() === \"stake\" ? i18n.t(\"stake:StakingSB\") : i18n.t(\"stake:UnstakingStakedSB\");\n};\nexport const getWrappingTypeText = action => {\n  return action.toLowerCase() === \"wrap\" ? i18n.t(\"stake:WrappingsBASH\") : i18n.t(\"stake:UnwrappingBASH\");\n};\nexport const isPendingTxn = (pendingTransactions, type) => {\n  return pendingTransactions.map(x => x.type).includes(type);\n};\nexport const txnButtonText = (pendingTransactions, type, defaultText) => {\n  return isPendingTxn(pendingTransactions, type) ? i18n.t(\"PendingEllipsis\") : defaultText;\n};\nexport const {\n  fetchPendingTxns,\n  clearPendingTxn\n} = pendingTxnsSlice.actions;\nexport default pendingTxnsSlice.reducer;","map":{"version":3,"sources":["/home/beard/Documents/V1Frontend/v1-frontend/src/store/slices/pending-txns-slice.ts"],"names":["createSlice","i18n","initialState","pendingTxnsSlice","name","reducers","fetchPendingTxns","state","action","push","payload","clearPendingTxn","target","find","x","txnHash","splice","indexOf","getStakingTypeText","toLowerCase","t","getWrappingTypeText","isPendingTxn","pendingTransactions","type","map","includes","txnButtonText","defaultText","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAOA,MAAMC,YAAgC,GAAG,EAAzC;AAEA,MAAMC,gBAAgB,GAAGH,WAAW,CAAC;AACjCI,EAAAA,IAAI,EAAE,qBAD2B;AAEjCF,EAAAA,YAFiC;AAGjCG,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,CAACC,KAAD,EAAQC,MAAR,EAA4C;AACxDD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACH,KAHK;;AAINC,IAAAA,eAAe,CAACJ,KAAD,EAAQC,MAAR,EAAuC;AAClD,YAAMI,MAAM,GAAGL,KAAK,CAACM,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACE,OAArC,CAAf;;AACA,UAAIE,MAAJ,EAAY;AACRL,QAAAA,KAAK,CAACS,MAAN,CAAaT,KAAK,CAACU,OAAN,CAAcL,MAAd,CAAb,EAAoC,CAApC;AACH;AACJ;;AATK;AAHuB,CAAD,CAApC;AAgBA,OAAO,MAAMM,kBAAkB,GAAIV,MAAD,IAAoB;AAClD,SAAOA,MAAM,CAACW,WAAP,OAAyB,OAAzB,GAAmClB,IAAI,CAACmB,CAAL,CAAO,iBAAP,CAAnC,GAA+DnB,IAAI,CAACmB,CAAL,CAAO,yBAAP,CAAtE;AACH,CAFM;AAIP,OAAO,MAAMC,mBAAmB,GAAIb,MAAD,IAAoB;AACnD,SAAOA,MAAM,CAACW,WAAP,OAAyB,MAAzB,GAAkClB,IAAI,CAACmB,CAAL,CAAO,qBAAP,CAAlC,GAAkEnB,IAAI,CAACmB,CAAL,CAAO,sBAAP,CAAzE;AACH,CAFM;AAIP,OAAO,MAAME,YAAY,GAAG,CAACC,mBAAD,EAAqCC,IAArC,KAAsD;AAC9E,SAAOD,mBAAmB,CAACE,GAApB,CAAwBX,CAAC,IAAIA,CAAC,CAACU,IAA/B,EAAqCE,QAArC,CAA8CF,IAA9C,CAAP;AACH,CAFM;AAIP,OAAO,MAAMG,aAAa,GAAG,CAACJ,mBAAD,EAAqCC,IAArC,EAAmDI,WAAnD,KAA2E;AACpG,SAAON,YAAY,CAACC,mBAAD,EAAsBC,IAAtB,CAAZ,GAA0CvB,IAAI,CAACmB,CAAL,CAAO,iBAAP,CAA1C,GAAsEQ,WAA7E;AACH,CAFM;AAIP,OAAO,MAAM;AAAEtB,EAAAA,gBAAF;AAAoBK,EAAAA;AAApB,IAAwCR,gBAAgB,CAAC0B,OAA/D;AAEP,eAAe1B,gBAAgB,CAAC2B,OAAhC","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport i18n from \"../../i18n\";\nexport interface IPendingTxn {\n    readonly txnHash: string;\n    readonly text: string;\n    readonly type: string;\n}\n\nconst initialState: Array<IPendingTxn> = [];\n\nconst pendingTxnsSlice = createSlice({\n    name: \"pendingTransactions\",\n    initialState,\n    reducers: {\n        fetchPendingTxns(state, action: PayloadAction<IPendingTxn>) {\n            state.push(action.payload);\n        },\n        clearPendingTxn(state, action: PayloadAction<string>) {\n            const target = state.find(x => x.txnHash === action.payload);\n            if (target) {\n                state.splice(state.indexOf(target), 1);\n            }\n        },\n    },\n});\n\nexport const getStakingTypeText = (action: string) => {\n    return action.toLowerCase() === \"stake\" ? i18n.t(\"stake:StakingSB\") : i18n.t(\"stake:UnstakingStakedSB\");\n};\n\nexport const getWrappingTypeText = (action: string) => {\n    return action.toLowerCase() === \"wrap\" ? i18n.t(\"stake:WrappingsBASH\") : i18n.t(\"stake:UnwrappingBASH\");\n};\n\nexport const isPendingTxn = (pendingTransactions: IPendingTxn[], type: string) => {\n    return pendingTransactions.map(x => x.type).includes(type);\n};\n\nexport const txnButtonText = (pendingTransactions: IPendingTxn[], type: string, defaultText: string) => {\n    return isPendingTxn(pendingTransactions, type) ? i18n.t(\"PendingEllipsis\") : defaultText;\n};\n\nexport const { fetchPendingTxns, clearPendingTxn } = pendingTxnsSlice.actions;\n\nexport default pendingTxnsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}